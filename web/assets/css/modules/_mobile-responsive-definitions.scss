//
// Mobile responsive mixins, convenience mixins, and variables that use Neat's column structure
//


// ================================================================================
//   Variables we'll be using to define our breakpoints
// ================================================================================

/// The minimum width that will be considered a "phone" with media queries. This
/// variable is only used for the `visible-phone()` and `invisible-phone()` mixins.
/// It is not used in the `respond-to()` mixin.
$phone-min-size: 320px;

/// The maximum width that will be considered a "phone" with media queries
$phone-max-size: 480px;

/// The minimum width that will be considered a "phablet" with media queries. Those
/// giant phones that can't even fit in your pocket
$phablet-min-size: $phone-max-size + 1;

/// The maximum width that will be considered a "phablet" with media queries. Those
/// giant phones that can't even fit in your pocket
$phablet-max-size: 768px;

/// The minimum width that will be considered a "tablet" with media queries.
$tablet-min-size: $phablet-max-size + 1;

/// The maximum width that will be considered a "tablet" with media queries
$tablet-max-size: 992px;

/// The minimum width that will be considered a "desktop" with media queries.
$desktop-min-size: $tablet-max-size + 1;



// ================================================================================
//   Mixins we'll be using for our breakpoints
// ================================================================================

/// Have the specified content inside of the mixin respond to a specific view size
///
/// @param {String} $media
///   Accepted view sizes: `phones`, `phablets`, `tablets`
///
/// @example scss - Usage
///   @include respond-to(phablets) {
///       .phablet-only {
///           display: block;
///       }
///   }
///
/// @example css - CSS Output
///   @media only screen and (max-width: 45em) {
///       .phablet-only {
///           display: block;
///       }
///   }

@mixin respond-to($media) {
    @if $media == phones {
        @media only screen and (max-width: $phone-max-size) { @content; }
    }
    @else if $media == phablets {
        @media only screen and (max-width: $phablet-max-size) { @content; }
    }
    @else if $media == tablets {
        @media only screen and (max-width: $tablet-max-size) { @content; }
    }
}

/// A mixin which includes Neat's [outer-container()](http://thoughtbot.github.io/neat-docs/latest/#outer-container) mixin for a desktop to keep it consistent with the other mixins
///
/// @param {Number [unit]} $width [em(1088)]
///   The max width to be applied to the element. Can be a percentage or a measure.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#outer-container
///
/// @example scss - SCSS Equivalent
///   @include outer-container;

@mixin desktop-container($width: $max-width) {
    @include outer-container($width);
}

/// A convenience mixin which includes Neat's [outer-container()](http://thoughtbot.github.io/neat-docs/latest/#outer-container) mixin that will only be included once we hit a tablet view or smaller
///
/// @param {Number [unit]} $width [em(1088)]
///   The max width to be applied to the element. Can be a percentage or a measure.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#outer-container
///
/// @example scss - SCSS Equivalent
///   @include respond-to(tablets) {
///       @include outer-container($width);
///   }

@mixin tablet-container($width: $max-width) {
    @include respond-to(tablets) {
        @include outer-container($width);
    }
}

/// A convenience mixin which includes Neat's [outer-container()](http://thoughtbot.github.io/neat-docs/latest/#outer-container) mixin that will only be included once we hit a phablet view or smaller
///
/// @param {Number [unit]} $width [em(1088)]
///   The max width to be applied to the element. Can be a percentage or a measure.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#outer-container
///
/// @example scss - SCSS Equivalent
///   @include respond-to(phablets) {
///       @include outer-container($width);
///   }

@mixin phablet-container($width: $max-width) {
    @include respond-to(phablets) {
        @include outer-container($width);
    }
}

/// A convenience mixin which includes Neat's [outer-container()](http://thoughtbot.github.io/neat-docs/latest/#outer-container) mixin that will only be included once we hit a phone view
///
/// @param {Number [unit]} $width [em(1088)]
///   The max width to be applied to the element. Can be a percentage or a measure.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#outer-container
///
/// @example scss - SCSS Equivalent
///   @include respond-to(phones) {
///       @include outer-container($width);
///   }

@mixin phone-container($width: $max-width) {
    @include respond-to(phones) {
        @include outer-container($width);
    }
}

/// A mixin which includes Neat's [span-columns()](http://thoughtbot.github.io/neat-docs/latest/#span-columns) mixin for a desktop to keep it consistent with the other mixins
///
/// @param {Number [unitless]} $columns
///   Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#span-columns
///
/// @example scss - SCSS Equivalent
///   @include span-columns($columns);

@mixin desktop-columns($columns) {
    @include span-columns($columns);
}

/// A convenience mixin which includes Neat's [span-columns()](http://thoughtbot.github.io/neat-docs/latest/#span-columns) mixin that will only be included once we hit a tablet view or smaller
///
/// @param {Number [unitless]} $columns
///   Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#span-columns
///
/// @example scss - SCSS Equivalent
///   @include respond-to(tablets) {
///       @include span-columns($columns);
///   }

@mixin tablet-columns($columns) {
    @include respond-to(tablets) {
        @include span-columns($columns);
    }
}

/// A convenience mixin which includes Neat's [span-columns()](http://thoughtbot.github.io/neat-docs/latest/#span-columns) mixin that will only be included once we hit a phablet view or smaller
///
/// @param {Number [unitless]} $columns
///   Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#span-columns
///
/// @example scss - SCSS Equivalent
///   @include respond-to(phablets) {
///       @include span-columns($columns);
///   }

@mixin phablet-columns($columns) {
    @include respond-to(phablets) {
        @include span-columns($columns);
    }
}

/// A convenience mixin which includes Neat's [span-columns()](http://thoughtbot.github.io/neat-docs/latest/#span-columns) mixin that will only be included once we hit a phone view
///
/// @param {Number [unitless]} $columns
///   Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#span-columns
///
/// @example scss - SCSS Equivalent
///   @include respond-to(phones) {
///       @include span-columns($columns);
///   }

@mixin phone-columns($columns) {
    @include respond-to(phones) {
        @include span-columns($columns);
    }
}

// @TODO Write SassDoc for these functions

@mixin set-visibilty($hide, $min, $max: 0) {
    display: if($hide, none, block);

    @if $max == 0 {
        @media only screen and (min-width: $min) {
            display: if($hide, block, none);
        }
    }
    @else {
        @media only screen and (min-width: $min) and (max-width: $max) {
            display: if($hide, block, none);
        }
    }
}

@mixin invisible-desktop() {
    @include set-visibilty(false, $desktop-min-size);
}

@mixin invisible-tablet() {
    @include set-visibilty(false, $tablet-min-size, $tablet-max-size);
}

@mixin invisible-phablet() {
    @include set-visibilty(false, $phablet-min-size, $phablet-max-size);
}

@mixin invisible-phone() {
    @include set-visibilty(false, $phone-min-size, $phone-max-size);
}

@mixin visible-desktop() {
    @include set-visibilty(true, $desktop-min-size);
}

@mixin visible-tablet() {
    @include set-visibilty(true, $tablet-min-size, $tablet-max-size);
}

@mixin visible-phablet() {
    @include set-visibilty(true, $phablet-min-size, $phablet-max-size);
}

@mixin visible-phone() {
    @include set-visibilty(true, $phone-min-size, $phone-max-size);
}