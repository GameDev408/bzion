//
// Mobile responsive mixins, convenience mixins, and variables that use Neat's column structure
//


// ================================================================================
//   Variables we'll be using to define our breakpoints
// ================================================================================

/// The minimum width that will be considered a "phone" with media queries. This
/// variable is only used for the `visible-phone()` and `invisible-phone()` mixins.
/// It is not used in the `respond-to()` mixin.
$phone-min-size: 320px;

/// The maximum width that will be considered a "phone" with media queries
$phone-max-size: 480px;

/// The minimum width that will be considered a "phablet" with media queries. Those
/// giant phones that can't even fit in your pocket
$phablet-min-size: $phone-max-size + 1;

/// The maximum width that will be considered a "phablet" with media queries. Those
/// giant phones that can't even fit in your pocket
$phablet-max-size: 768px;

/// The minimum width that will be considered a "tablet" with media queries.
$tablet-min-size: $phablet-max-size + 1;

/// The maximum width that will be considered a "tablet" with media queries
$tablet-max-size: 992px;

/// The minimum width that will be considered a "desktop" with media queries.
$desktop-min-size: $tablet-max-size + 1;



// ================================================================================
//   Mixins we'll be using for our breakpoints
// ================================================================================

/// Create a media query that will automatically handle max or min widths. When both $min
/// and $max are set, both of them will be used and generate a media query with a minimum
/// and maximum width. This mixin shouldn't be accessed directly but instead should only
/// be used through one of the convenience mixins that uses this mixin.
///
/// @access private
/// @content
///
/// @param {Number [unit]} $min [0]
///   The minimum width for this media query to consider. When set to 0, a media query
///   with a max-width will be generated
///
/// @param {Number [unit]} $max [0]
///   The maximum width for this media query to consider. When set to 0, a media query
///   with a min-width will be generated
///

@mixin media-size($min: 0, $max: 0) {
    @if $min == $max {
        @error "media-size() does not allow $min and $max both be equal to each other."
    }
    @else if $min > $max and $max != 0 {
        @error "media-size() does not allow $min to be greater $max.";
    }
    @else if $min < 0 or $max < 0 {
        @error "media-size() does not allow either $min or $max to be less than 0.";
    }

    @if $min == 0 and $max != 0 {
        @media only screen and (max-width: $max) { @content; }
    }
    @else if $min != 0 and $max == 0 {
        @media only screen and (min-width: $min) { @content; }
    }
    @else if $min != 0 and $max != 0 {
        @media only screen and (min-width: $min) and (max-width: $max) { @content; }
    }
    @else {
        @error "media-size() does not allow $min and $max both be 0.";
    }
}


/// Have the specified content inside of the mixin respond to a specific view size. Because
/// BZiON is "desktop first," all of the applied styles will also be applied to smaller views.
///
/// Passing a random value will cause the CSS rules to be applied to all views. This means you
/// may pass a value such as `desktops` for consistency but it will be the equivalent of passing
/// `bacon`.
///
/// @content
///
/// @param {String} $media
///   Accepted view sizes: `phones`, `phablets`, `tablets`
///
/// @example scss - Usage
///   @include respond-to(phablets) {
///       .phablet-and-smaller {
///           display: block;
///       }
///   }
///
/// @example css - CSS Output
///   @media only screen and (max-width: 992px) {
///       .phablet-and-smaller {
///           display: block;
///       }
///   }

@mixin respond-to($media) {
    @if $media == phones {
        @include media-size(0, $phone-max-size) { @content; }
    }
    @else if $media == phablets {
        @include media-size(0, $phablet-max-size) { @content; }
    }
    @else if $media == tablets {
        @include media-size(0, $tablet-max-size) { @content; }
    }
    @else {
        @content;
    }
}


/// Similar to `respond-to` with the exception that instead of smaller views also inheriting
/// these CSS rules, only a specific view size will able to see the content
///
/// @content
///
/// @param {String} $media
///   Accepted view sizes: `phones`, `phablets`, `tablets`, `desktops`
///
/// @example scss - Usage
///   @include respond-to(phablets) {
///       .phablet-only {
///           display: block;
///       }
///   }
///
/// @example css - CSS Output
///   @media only screen and (min-width: 481px) and (max-width: 768px) {
///       .phablet-only {
///           display: block;
///       }
///   }

@mixin respond-only-to($media) {
    @if $media == phones {
        @include media-size($phone-min-size, $phone-max-size) { @content; }
    }
    @else if $media == phablets {
        @include media-size($phablet-min-size, $phablet-max-size) { @content; }
    }
    @else if $media == tablets {
        @include media-size($tablet-min-size, $tablet-max-size) { @content; }
    }
    @else if $media == desktops {
        @include media-size($desktop-min-size) { @content; }
    }
}


/// A mixin which includes Neat's [outer-container()](http://thoughtbot.github.io/neat-docs/latest/#outer-container) mixin for a desktop to keep it consistent with the other mixins
///
/// @param {Number [unit]} $width [em(1088)]
///   The max width to be applied to the element. Can be a percentage or a measure.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#outer-container
///
/// @example scss - SCSS Equivalent
///   @include outer-container;

@mixin desktop-container($width: $max-width) {
    @include outer-container($width);
}


/// A convenience mixin which includes Neat's [outer-container()](http://thoughtbot.github.io/neat-docs/latest/#outer-container) mixin that will only be included once we hit a tablet view or smaller
///
/// @param {Number [unit]} $width [em(1088)]
///   The max width to be applied to the element. Can be a percentage or a measure.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#outer-container
///
/// @example scss - SCSS Equivalent
///   @include respond-to(tablets) {
///       @include outer-container($width);
///   }

@mixin tablet-container($width: $max-width) {
    @include respond-to(tablets) {
        @include outer-container($width);
    }
}


/// A convenience mixin which includes Neat's [outer-container()](http://thoughtbot.github.io/neat-docs/latest/#outer-container) mixin that will only be included once we hit a phablet view or smaller
///
/// @param {Number [unit]} $width [em(1088)]
///   The max width to be applied to the element. Can be a percentage or a measure.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#outer-container
///
/// @example scss - SCSS Equivalent
///   @include respond-to(phablets) {
///       @include outer-container($width);
///   }

@mixin phablet-container($width: $max-width) {
    @include respond-to(phablets) {
        @include outer-container($width);
    }
}


/// A convenience mixin which includes Neat's [outer-container()](http://thoughtbot.github.io/neat-docs/latest/#outer-container) mixin that will only be included once we hit a phone view
///
/// @param {Number [unit]} $width [em(1088)]
///   The max width to be applied to the element. Can be a percentage or a measure.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#outer-container
///
/// @example scss - SCSS Equivalent
///   @include respond-to(phones) {
///       @include outer-container($width);
///   }

@mixin phone-container($width: $max-width) {
    @include respond-to(phones) {
        @include outer-container($width);
    }
}


/// A mixin which includes Neat's [span-columns()](http://thoughtbot.github.io/neat-docs/latest/#span-columns) mixin for a desktop to keep it consistent with the other mixins
///
/// @param {Number [unitless]} $columns
///   Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#span-columns
///
/// @example scss - SCSS Equivalent
///   @include span-columns($columns);

@mixin desktop-columns($columns) {
    @include span-columns($columns);
}


/// A convenience mixin which includes Neat's [span-columns()](http://thoughtbot.github.io/neat-docs/latest/#span-columns) mixin that will only be included once we hit a tablet view or smaller
///
/// @param {Number [unitless]} $columns
///   Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#span-columns
///
/// @example scss - SCSS Equivalent
///   @include respond-to(tablets) {
///       @include span-columns($columns);
///   }

@mixin tablet-columns($columns) {
    @include respond-to(tablets) {
        @include span-columns($columns);
    }
}


/// A convenience mixin which includes Neat's [span-columns()](http://thoughtbot.github.io/neat-docs/latest/#span-columns) mixin that will only be included once we hit a phablet view or smaller
///
/// @param {Number [unitless]} $columns
///   Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#span-columns
///
/// @example scss - SCSS Equivalent
///   @include respond-to(phablets) {
///       @include span-columns($columns);
///   }

@mixin phablet-columns($columns) {
    @include respond-to(phablets) {
        @include span-columns($columns);
    }
}


/// A convenience mixin which includes Neat's [span-columns()](http://thoughtbot.github.io/neat-docs/latest/#span-columns) mixin that will only be included once we hit a phone view
///
/// @param {Number [unitless]} $columns
///   Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.
///
/// @link http://thoughtbot.github.io/neat-docs/latest/#span-columns
///
/// @example scss - SCSS Equivalent
///   @include respond-to(phones) {
///       @include span-columns($columns);
///   }

@mixin phone-columns($columns) {
    @include respond-to(phones) {
        @include span-columns($columns);
    }
}


/// Set the visibility of a specific element to be visible or hidden based on the screen width. An element will only be
/// visible when the screen is at the specified width. For example, if you have an element only be visible on phones,
/// you would set the minimum and maximum screen size a phone would have. You can use pre-defined values such as
/// `$phone-min-size` and `$phone-max-size` to stay consistent with the project. This function should not be accessed
/// directly and instead should only be used through convenience mixins.
///
/// @access private
///
/// @param {Boolean} $hide
///   Whether you want to hide or display the specified element in the specified screen width. True to display the element
///   **only** on the specified screen size.
/// @param {Number [unit]} $min
///   The minimum size a screen should have in order for the specified element to be displayed
/// @param {Number [unit]} $max
///   (Optional) The maximum size a screen should have in order for the specified element to be displayed. If no maximum
///   or 0 is specified, then the element will be displayed on a screen size at least `$min` in width.

@mixin set-visible($hide, $media) {
    display: if($hide, none, block);

    @include respond-only-to($media) {
        display: if($hide, block, none);
    }
}


/// A mixin that will hide the specified element only on a desktop
///
/// @example scss
///   .hide-desktop-only {
///       @include invisible-desktop();
///   }

@mixin invisible-desktop() {
    @include set-visible(false, desktops);
}


/// A mixin that will hide the specified element only on a tablet
///
/// @example scss
///   .hide-tablet-only {
///       @include invisible-tablet();
///   }

@mixin invisible-tablet() {
    @include set-visible(false, tablets);
}


/// A mixin that will hide the specified element only on a phablet
///
/// @example scss
///   .hide-phablet-only {
///       @include invisible-phablet();
///   }

@mixin invisible-phablet() {
    @include set-visible(false, phablets);
}


/// A mixin that will hide the specified element only on a phone
///
/// @example scss
///   .hide-phone-only {
///       @include invisible-phone();
///   }

@mixin invisible-phone() {
    @include set-visible(false, phones);
}


/// A mixin that will make the specified element appear only on a desktop
///
/// @example scss
///   .display-desktop-only {
///       @include visible-desktop();
///   }

@mixin visible-desktop() {
    @include set-visible(true, desktops);
}


/// A mixin that will make the specified element appear only on a table
///
/// @example scss
///   .display-tablet-only {
///       @include visible-tablet();
///   }

@mixin visible-tablet() {
    @include set-visible(true, tablets);
}


/// A mixin that will make the specified element appear only on a phablet
///
/// @example scss
///   .display-phablet-only {
///       @include visible-phablet();
///   }

@mixin visible-phablet() {
    @include set-visible(true, phablets);
}


/// A mixin that will make the specified element appear only on a phone
///
/// @example scss
///   .display-phone-only {
///       @include visible-phone();
///   }

@mixin visible-phone() {
    @include set-visible(true, phones);
}


/// Each of columns generated through our `*-columns()` mixins will have a right margin
/// so this mixin will set the margin.
///
/// @access private
///
/// @param {0 | nth-child} $nth-child
///   If `0` is passed then the margin will be removed for all of the elements. Otherwise
///   this value will be applied to a :nth-child selector.
///
/// @param {String} $respond-to
///   The view size and smaller that the gutter will be removed from. Accepted sizes are
///   the same as `respond-to`.
///
/// @param {Number [unitless]} $gutter
///   The value for the right margin

@mixin set-gutter($nth-child, $respond-to, $gutter) {
    @include respond-to($respond-to) {
        @if ($nth-child == 0) {
            margin-right: $gutter;
        }
        @else {
            &:nth-child(#{$nth-child}) {
                margin-right: $gutter;
            }
        }
    }
}


/// Set the gutter, or right margin, of the columns generated by `*-columns()` for desktops
/// and smaller. By default this mixin will remove the gutter.
///
/// @param {0 | nth-child} $nth-child [0]
///   If `0` is passed then the margin will be removed for all of the elements. Otherwise
///   this value will be applied to a :nth-child selector.
///
/// @param {Number [unit]} $gutter [0]
///   The new width the right margin will take

@mixin desktop-gutter($nth-child: 0, $gutter: 0) {
    @include set-gutter($nth-child, desktops, $gutter);
}


/// Set the gutter, or right margin, of the columns generated by `*-columns()` for tablets
/// and smaller. By default this mixin will remove the gutter.
///
/// @param {0 | nth-child} $nth-child [0]
///   If `0` is passed then the margin will be removed for all of the elements. Otherwise
///   this value will be applied to a :nth-child selector.
///
/// @param {Number [unit]} $gutter [0]
///   The new width the right margin will take

@mixin tablet-gutter($nth-child: 0, $gutter: 0) {
    @include set-gutter($nth-child, tablets, $gutter);
}


/// Set the gutter, or right margin, of the columns generated by `*-columns()` for phablets
/// and smaller. By default this mixin will remove the gutter.
///
/// @param {0 | nth-child} $nth-child [0]
///   If `0` is passed then the margin will be removed for all of the elements. Otherwise
///   this value will be applied to a :nth-child selector.
///
/// @param {Number [unit]} $gutter [0]
///   The new width the right margin will take

@mixin phablet-gutter($nth-child: 0, $gutter: 0) {
    @include set-gutter($nth-child, phablets, $gutter);
}


/// Set the gutter, or right margin, of the columns generated by `*-columns()` for phones.
/// By default this mixin will remove the gutter.
///
/// @param {0 | nth-child} $nth-child [0]
///   If `0` is passed then the margin will be removed for all of the elements. Otherwise
///   this value will be applied to a :nth-child selector.
///
/// @param {Number [unit]} $gutter [0]
///   The new width the right margin will take

@mixin phone-gutter($nth-child: 0, $gutter: 0) {
    @include set-gutter($nth-child, phones, $gutter);
}